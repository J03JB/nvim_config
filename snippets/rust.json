{
  "allow_deadcode": {
    "prefix": "deadcode",
    "body": "#[allow(dead_code)]",
    "description": "Close the dead code warning"
  },
  "closure": {
    "prefix": "||{",
    "body": [
      "|${1:arg}|${2| ,-> |} {",
      "    ${0}",
      "}"
    ]
  },
  "closure as variable": {
    "prefix": "let||",
    "body": [
      "let ${1} = |${2:arg}|${3| ,-> |} {",
      "    ${0}",
      "};"
    ]
  },
  "inline closure": {
    "prefix": "||",
    "body": "|${1: args}| ${0}"
  },
  "Anyhow Result": {
    "prefix": "anyhow",
    "body": "anyhow::Result<()>"
  },
  "result": {
    "prefix": "res",
    "body": [
      "Result<${1:$TM_SELECTED_TEXT}, ${2:dyn std::error::Error}>"
    ]
  },
  "boxed error": {
    "prefix": "be",
    "body": [
      "Box<dyn error::Error>"
    ]
  },
  "anyhow error": {
    "prefix": "ae",
    "body": [
      "anyhow::Error"
    ]
  },
  "anyhow result": {
    "prefix": "ar",
    "body": [
      "anyhow::Result<${1:$TM_SELECTED_TEXT}>"
    ]
  },
  "println": {
    "prefix": "pl",
    "body": [
      "println!(\"$1\");"
    ]
  },
  "rustdoc": {
    "prefix": "/",
    "body": [
      "/// "
    ]
  },
  "test": {
    "prefix": "test",
    "body": [
      "#[test]",
      "fn ${1:test_name}() {",
      "    ${0}",
      "};"
    ]
  }
}
